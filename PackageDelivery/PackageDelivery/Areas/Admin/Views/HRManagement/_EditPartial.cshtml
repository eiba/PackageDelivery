@using PackageDelivery.Areas.Admin.Controllers
@using PackageDelivery.Models
@using Microsoft.AspNet.Identity
@using Microsoft.AspNet.Identity.EntityFramework
@model PackageDelivery.Models.ChangeProfileAdmin

@{
    var vueIdd = Model.vueIdd;
    var modalIdd = Model.modalIdd;
    var formId = vueIdd + modalIdd;
}

<div id="@vueIdd">



    <modal :show.sync="showModal">
        <h3 slot="header">Rediger bruker</h3>
        <h5 slot="body">
      @using (Ajax.BeginForm("Edit", "HRManagement", new {param=Model.search, check=Model.check},new AjaxOptions
      {
          
          UpdateTargetId = "update",
          InsertionMode = InsertionMode.Replace,
          HttpMethod = "POST",

      }, new { @class = "form-horizontal", role = "form", id = formId }))
      {
           @Html.AntiForgeryToken()

          <div class="form-horizontal">
              @Html.ValidationSummary(true)
              @Html.HiddenFor(model => model.Id)

              <div class="form-group">
                  @Html.LabelFor(model => model.Fname, new {@class = "control-label col-md-2"})
                  <div class="col-md-10">
                      <input name="Fname" value="@Model.Fname" class="form-control" id="model" required>
                      @Html.ValidationMessageFor(model => model.Fname)
                  </div>
              </div>

              <div class="form-group">
                  @Html.LabelFor(model => model.Lname, new {@class = "control-label col-md-2"})
                  <div class="col-md-10">
                      <input name="Lname" value="@Model.Lname" class="form-control" required>
                      @Html.ValidationMessageFor(model => model.Lname)
                  </div>
              </div>
              <div class="form-group">
                  @Html.LabelFor(model => model.StreetAdress, new {@class = "control-label col-md-2"})
                  <div class="col-md-10">
                      <input name="StreetAdress" value="@Model.StreetAdress" class="form-control" required>
                      @Html.ValidationMessageFor(model => model.StreetAdress)
                  </div>
              </div>
              <div class="form-group">
                  @Html.LabelFor(model => model.PostCode, new {@class = "control-label col-md-2"})
                  <div class="col-md-10">
                      <input name="PostCode" value="@Model.PostCode" class="form-control" required>
                      @Html.ValidationMessageFor(model => model.PostCode) 
                  </div>
              </div>
              <div class="form-group">
                  @Html.LabelFor(model => model.Suburb, new {@class = "control-label col-md-2"})
                  <div class="col-md-10">
                      <input name="Suburb" value="@Model.Suburb" class="form-control" required>
                      @Html.ValidationMessageFor(model => model.Suburb)
                  </div>
              </div>
              <div class="form-group">
                  @Html.LabelFor(model => model.State, new {@class = "control-label col-md-2"})
                  <div class="col-md-10">
                      <input name="State" value="@Model.State" class="form-control" required>
                      @Html.ValidationMessageFor(model => model.State)
                  </div>
              </div>
              <div class="form-group">
                  @Html.LabelFor(model => model.Phone, new {@class = "control-label col-md-2"})
                  <div class="col-md-10">
                      <input name="Phone" value="@Model.Phone" class="form-control" required pattern="[0-9]{8,12}">
                      @Html.ValidationMessageFor(model => model.Phone)
                  </div>
              </div>
              <div class="form-group">
                  @Html.LabelFor(model => model.DoB, new {@class = "control-label col-md-2"})
                  <div class="col-md-10">
                      <input name="DoB" value="@Model.DoB" class="form-control" required>
                      @Html.ValidationMessageFor(model => model.DoB)
                  </div>
              </div>

              @if ((Model.BankAccount !=  null) && (Model.CarRego != null)) {
              <div class="form-group">
                  @Html.LabelFor(model => model.CarRego, new {@class = "control-label col-md-2"})
                  <div class="col-md-10">
                      <input name="CarRego" value="@Model.CarRego" class="form-control" required>
                      @Html.ValidationMessageFor(model => model.CarRego)
                  </div>
              </div>
                  <div class="form-group">
                      @Html.LabelFor(model => model.BankAccount, new {@class = "control-label col-md-2"})
                      <div class="col-md-10">
                          <input name="BankAccount" value="@Model.BankAccount" class="form-control" required>
                          @Html.ValidationMessageFor(model => model.BankAccount)
                      </div>
                  </div>
              }
              <div class="form-group">
                  @Html.LabelFor(model => model.Email, new {@class = "control-label col-md-2"})
                  <div class="col-md-10">
                      <input name="Email" value="@Model.Email" class="form-control" type="email" required>
                      @Html.ValidationMessageFor(model => model.Email)
                  </div>
              </div>
              <div class="form-group">
                  @Html.LabelFor(m => m.Password, new {@class = "col-md-2 control-label"})
                  <div class="col-md-10">
                      <input name="Password" value="" class="form-control" type="password">
                      @Html.ValidationMessageFor(model => model.Password)
                  </div>
              </div>
              <div class="form-group">
                  @Html.LabelFor(m => m.ConfirmPassword, new {@class = "col-md-2 control-label"})
                  <div class="col-md-10">
                      <input name="ConfirmPassword" value="" class="form-control" type="password">
                      @Html.ValidationMessageFor(model => model.ConfirmPassword)
                  </div>
              </div>
              
                     <input name="UserName" value="@Model.UserName" class="form-control" type="hidden">
            
          </div>
            
            }
</h5>
    </modal>
</div>

<script type="x/template" id="@modalIdd">
    <div class="modal-mask" v-on:click="close" v-show="show" transition="modal">
        <div class="modal-wrapper">
            <div class="modal-container" style="width:650px;" v-on:click.stop>
                
                <div class="modal-header">
                    <slot name="header">
                    </slot>
                </div>

                <div class="modal-body">
                    <slot name="body">

                    </slot>

                </div>

                <div class="modal-footer">
                    <slot name="footer">
                        <button class="modal-default-button btn-danger btn" id="knapp" v-on:click="closeButton">
                            Lagre
                        </button>
                    </slot>
                </div>
            </div>
        </div>
    </div>
</script>

<script>

    Vue.component('modal', {
        template: '#@modalIdd',
        props: {
            show: {
                type: Boolean,
                required: true,
                twoWay: true

            }
        },
        methods: {
            close: function() {
                this.show = false;
            },
            closeButton: function() {
                    $("form#@formId").submit();
                    this.show = false;
                
            },
            checkBox: function() {
                $('#checkbox1').prop('checked', true);
            }
        },
        ready: function() {
            this.show = true;
            document.addEventListener("keydown", (e) => {
                if (this.show && e.keyCode == 27) {
                    this.close();
                } else if (this.show && e.keyCode == 13) {
                    this.closeButton();
                }
            });
        }
    });
    
        new Vue({
            el: '#@vueIdd',
            data: {
                showModal: false,
            },
            methods: {
                showModalf: function() {
                    this.showModal = true;
                },

            }

        });
    


</script>
